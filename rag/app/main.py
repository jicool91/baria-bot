import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from .settings import settings
from .keyboards import main_patient_kb, main_doctor_kb
from .states import RegStates
from . import db
import httpx

logging.basicConfig(level=logging.INFO)

async def on_startup():
    """Startup handler without parameters"""
    pass

async def on_shutdown():
    """Shutdown handler without parameters"""
    pass

async def cmd_start(message: Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ë–î –ø–æ–∫–∞ —á—Ç–æ
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏–∏.", reply_markup=main_patient_kb)

async def handle_patient_menu(message: Message):
    text = message.text
    if text == "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò":
        await message.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å. –Ø —Å–≤–µ—Ä—é—Å—å —Å –º–µ—Ç–æ–¥–∏—á–∫–∞–º–∏ –∏ –æ—Ç–≤–µ—á—É.")
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ memory
        handle_patient_menu.awaiting_ai = getattr(handle_patient_menu, 'awaiting_ai', set())
        handle_patient_menu.awaiting_ai.add(message.from_user.id)
    elif text == "üìù –ñ—É—Ä–Ω–∞–ª":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–µ—Å (–∫–≥), –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1-5) –∏ —Å–∏–º–ø—Ç–æ–º—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: 85.2;4;—Ç–æ—à–Ω–æ—Ç–∞ –Ω–µ—Ç")
    else:
        await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def handle_any_message(message: Message):
    awaiting_ai = getattr(handle_patient_menu, 'awaiting_ai', set())

    if message.from_user.id in awaiting_ai:
        try:
            async with httpx.AsyncClient(timeout=30) as client:
                r = await client.post(settings.RAG_URL, json={
                    "user_id": message.from_user.id,
                    "question": message.text
                })
            if r.status_code == 200:
                await message.answer(r.json().get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"))
            else:
                await message.answer("–°–µ—Ä–≤–∏—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logging.error(f"RAG error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")

        awaiting_ai.discard(message.from_user.id)

async def main():
    bot = Bot(settings.BOT_TOKEN)
    dp = Dispatcher()

    # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    dp.message.register(cmd_start, CommandStart())
    dp.message.register(handle_patient_menu, F.text.in_({
        "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", "üíä –í–∏—Ç–∞–º–∏–Ω—ã", "üö∞ –í–æ–¥–∞", "üìù –ñ—É—Ä–Ω–∞–ª", "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò", "ü©∫ –°–≤—è–∑—å —Å –≤—Ä–∞—á–æ–º"
    }))
    dp.message.register(handle_any_message, F.text)

    logging.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())