package com.baria.bot.handler;

import com.baria.bot.model.Product;
import com.baria.bot.model.User;
import com.baria.bot.repository.ProductRepository;
import com.baria.bot.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

@Slf4j
@Component
@RequiredArgsConstructor
public class CatalogHandler {
    
    private final ProductRepository productRepository;
    private final UserRepository userRepository;
    private final java.util.Set<Long> searchAwait = new java.util.HashSet<>();

    private static final int PAGE_SIZE = 5;
    
    public SendMessage handleCatalogBrowse(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:");
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        keyboard.add(createButton("üçΩ –ù–∞–±–æ—Ä—ã –µ–¥—ã –¥–ª—è –¥–∏–µ—Ç", "CATALOG:SETS"));
        keyboard.add(createButton("üé≠ –ú–∞—Å–∫–∏", "CATALOG:MASKS"));
        keyboard.add(createButton("üß¥ –®–∞–º–ø—É–Ω–∏", "CATALOG:SHAMPOOS"));
        keyboard.add(createButton("üß¥ –ö—Ä–µ–º—ã", "CATALOG:CREAMS"));
        keyboard.add(createButton("üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏", "CATALOG:SUPPS"));
        keyboard.add(createButton("üîé –ü–æ–∏—Å–∫", "CATALOG:SEARCH"));
        keyboard.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "MAIN_MENU"));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }

    public boolean isAwaitingSearch(Long chatId) {
        return searchAwait.contains(chatId);
    }

    public SendMessage promptSearch(Long chatId) {
        searchAwait.add(chatId);
        SendMessage m = new SendMessage();
        m.setChatId(chatId.toString());
        m.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞");
        return m;
    }

    public SendMessage handleSearch(Long chatId, String query) {
        searchAwait.remove(chatId);
        Page<Product> products = productRepository.searchProducts(query, PageRequest.of(0, PAGE_SIZE));
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        if (products.isEmpty()) {
            message.setText("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            message.setReplyMarkup(createBackButton());
            return message;
        }
        StringBuilder text = new StringBuilder("–ù–∞–π–¥–µ–Ω–æ:\n\n");
        for (Product p : products.getContent()) {
            text.append("‚Ä¢ ").append(p.getTitle()).append("\n");
        }
        message.setText(text.toString());
        message.setReplyMarkup(createProductListMarkup(products, "SEARCH"));
        return message;
    }
    
    public SendMessage handleCategoryProducts(Long chatId, String category, int page) {
        Page<Product> products = productRepository.findByCategory(category, PageRequest.of(page, PAGE_SIZE));
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        
        if (products.isEmpty()) {
            message.setText("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤");
            message.setReplyMarkup(createBackButton());
            return message;
        }
        
        StringBuilder text = new StringBuilder("üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n");
        
        for (Product product : products.getContent()) {
            text.append("‚Ä¢ ").append(product.getTitle()).append("\n");
            text.append("  ").append(product.getDescription()).append("\n");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂–∏
            if (product.getAllowedPhases() != null && !product.getAllowedPhases().isEmpty()) {
                text.append("  üìä –§–∞–∑—ã: ").append(String.join(", ", product.getAllowedPhases())).append("\n");
            }
            if (product.getTags() != null && product.getTags().contains("lactose_free")) {
                text.append("  ü•õ –ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã\n");
            }
            text.append("\n");
        }
        
        message.setText(text.toString());
        message.setReplyMarkup(createProductListMarkup(products, category));
        
        return message;
    }
    
    public SendMessage handleProductDetails(Long chatId, Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
            message.setReplyMarkup(createBackButton());
            return message;
        }
        
        Product product = productOpt.get();
        
        StringBuilder text = new StringBuilder();
        text.append("üì¶ ").append(product.getTitle()).append("\n\n");
        text.append("üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n").append(product.getDescription()).append("\n\n");
        
        if (product.getPrice() != null) {
            text.append("üí∞ –¶–µ–Ω–∞: ").append(product.getPrice()).append(" ‚ÇΩ\n\n");
        }
        
        if (product.getAllowedPhases() != null && !product.getAllowedPhases().isEmpty()) {
            text.append("üìä –†–∞–∑—Ä–µ—à—ë–Ω –≤ —Ñ–∞–∑–∞—Ö:\n");
            for (String phase : product.getAllowedPhases()) {
                text.append("‚Ä¢ ").append(getPhaseDisplayName(phase)).append("\n");
            }
            text.append("\n");
        }
        
        if (product.getAllergens() != null && !product.getAllergens().isEmpty()) {
            text.append("‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–µ–Ω—ã: ").append(String.join(", ", product.getAllergens())).append("\n\n");
        }
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text.toString());
        message.setReplyMarkup(createProductDetailsMarkup(product, chatId));
        
        return message;
    }
    
    public SendMessage checkProductPhase(Long chatId, Long productId) {
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        Optional<Product> productOpt = productRepository.findById(productId);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        
        if (userOpt.isEmpty() || userOpt.get().getPhase() == null) {
            message.setText("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ñ–∞–∑—É –ø–∏—Ç–∞–Ω–∏—è");
            message.setReplyMarkup(createBackButton());
            return message;
        }
        
        if (productOpt.isEmpty()) {
            message.setText("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
            message.setReplyMarkup(createBackButton());
            return message;
        }
        
        User user = userOpt.get();
        Product product = productOpt.get();
        
        if (product.getAllowedPhases() == null || product.getAllowedPhases().isEmpty()) {
            message.setText("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ñ–∞–∑–∞–º");
        } else if (product.getAllowedPhases().contains(user.getPhase().getCode())) {
            message.setText("‚úÖ –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Ä–∞–∑—Ä–µ—à—ë–Ω –≤ –≤–∞—à–µ–π —Ñ–∞–∑–µ (" + getPhaseDisplayName(user.getPhase().getCode()) + ")");
        } else {
            message.setText("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π —Ñ–∞–∑–µ (" + getPhaseDisplayName(user.getPhase().getCode()) + ").\n" +
                          "–†–∞–∑—Ä–µ—à—ë–Ω –≤ —Ñ–∞–∑–∞—Ö: " + String.join(", ", product.getAllowedPhases()));
        }
        
        message.setReplyMarkup(createBackButton());
        return message;
    }
    
    private InlineKeyboardMarkup createProductListMarkup(Page<Product> products, String category) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        for (Product product : products.getContent()) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton detailsBtn = new InlineKeyboardButton();
            detailsBtn.setText("‚ÑπÔ∏è " + product.getTitle());
            detailsBtn.setCallbackData("CATALOG:ITEM:" + product.getId());
            row.add(detailsBtn);
            
            if (product.getUrl() != null) {
                InlineKeyboardButton buyBtn = new InlineKeyboardButton();
                buyBtn.setText("üõí –ö—É–ø–∏—Ç—å");
                buyBtn.setUrl(product.getUrl());
                row.add(buyBtn);
            }
            
            keyboard.add(row);
        }
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        List<InlineKeyboardButton> pagination = new ArrayList<>();
        if (products.hasPrevious()) {
            InlineKeyboardButton prevBtn = new InlineKeyboardButton();
            prevBtn.setText("‚óÄÔ∏è –ü—Ä–µ–¥");
            prevBtn.setCallbackData("CATALOG:" + category + ":PAGE:" + (products.getNumber() - 1));
            pagination.add(prevBtn);
        }
        
        if (products.hasNext()) {
            InlineKeyboardButton nextBtn = new InlineKeyboardButton();
            nextBtn.setText("‚ñ∂Ô∏è –°–ª–µ–¥");
            nextBtn.setCallbackData("CATALOG:" + category + ":PAGE:" + (products.getNumber() + 1));
            pagination.add(nextBtn);
        }
        
        if (!pagination.isEmpty()) {
            keyboard.add(pagination);
        }
        
        keyboard.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "CATALOG_BROWSE"));
        
        markup.setKeyboard(keyboard);
        return markup;
    }
    
    private InlineKeyboardMarkup createProductDetailsMarkup(Product product, Long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        if (product.getUrl() != null) {
            InlineKeyboardButton buyBtn = new InlineKeyboardButton();
            buyBtn.setText("üõí –ö—É–ø–∏—Ç—å");
            buyBtn.setUrl(product.getUrl());
            keyboard.add(Arrays.asList(buyBtn));
        }
        
        keyboard.add(createButton("‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω –≤ –º–æ–µ–π —Ñ–∞–∑–µ?", "CATALOG:CHECK_PHASE:" + product.getId()));
        keyboard.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "CATALOG:" + product.getCategory()));
        
        markup.setKeyboard(keyboard);
        return markup;
    }
    
    private InlineKeyboardMarkup createBackButton() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "CATALOG_BROWSE"));
        markup.setKeyboard(keyboard);
        return markup;
    }
    
    private List<InlineKeyboardButton> createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return Arrays.asList(button);
    }
    
    private String getPhaseDisplayName(String phase) {
        switch (phase) {
            case "liquid": return "–ñ–∏–¥–∫–∞—è";
            case "pureed": return "–ü—é—Ä–µ";
            case "soft": return "–ú—è–≥–∫–∞—è";
            case "regular": return "–û–±—ã—á–Ω–∞—è";
            default: return phase;
        }
    }
}
