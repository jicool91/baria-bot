package com.baria.bot.handler;

import com.baria.bot.model.User;
import com.baria.bot.repository.UserRepository;
import com.baria.bot.service.AiService;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class PlanHandler {
    
    private final UserRepository userRepository;
    private final AiService aiService;
    private final ObjectMapper objectMapper;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞–Ω–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î –∏–ª–∏ Redis)
    private final Map<Long, WeeklyPlan> userPlans = new HashMap<>();
    
    public SendMessage generatePlan(Long chatId) {
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        
        if (userOpt.isEmpty()) {
            return createErrorMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
        }
        
        User user = userOpt.get();
        
        if (user.getPhase() == null) {
            return createErrorMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ñ–∞–∑—É –ø–∏—Ç–∞–Ω–∏—è");
        }
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        WeeklyPlan plan = generateWeeklyPlan(user);
        userPlans.put(chatId, plan);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        return showDayPlan(chatId, 0);
    }
    
    public SendMessage showDayPlan(Long chatId, int dayIndex) {
        WeeklyPlan plan = userPlans.get(chatId);
        
        if (plan == null) {
            return generatePlan(chatId);
        }
        
        if (dayIndex < 0 || dayIndex >= 7) {
            dayIndex = 0;
        }
        
        DayPlan dayPlan = plan.days.get(dayIndex);
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        
        StringBuilder text = new StringBuilder();
        text.append("üìÖ ").append(dayPlan.dayName).append("\n");
        text.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");
        
        // –ó–∞–≤—Ç—Ä–∞–∫
        text.append("üåÖ –ó–ê–í–¢–†–ê–ö (").append(dayPlan.breakfast.time).append(")\n");
        text.append("‚Ä¢ ").append(dayPlan.breakfast.meal).append("\n");
        text.append("  üìä –ë–µ–ª–æ–∫: ").append(dayPlan.breakfast.protein).append("–≥\n");
        text.append("  ü•§ –û–±—ä—ë–º: ").append(dayPlan.breakfast.volume).append("–º–ª\n\n");
        
        // –ü–µ—Ä–µ–∫—É—Å 1
        text.append("ü•§ –ü–ï–†–ï–ö–£–° 1 (").append(dayPlan.snack1.time).append(")\n");
        text.append("‚Ä¢ ").append(dayPlan.snack1.meal).append("\n");
        text.append("  üìä –ë–µ–ª–æ–∫: ").append(dayPlan.snack1.protein).append("–≥\n\n");
        
        // –û–±–µ–¥
        text.append("‚òÄÔ∏è –û–ë–ï–î (").append(dayPlan.lunch.time).append(")\n");
        text.append("‚Ä¢ ").append(dayPlan.lunch.meal).append("\n");
        text.append("  üìä –ë–µ–ª–æ–∫: ").append(dayPlan.lunch.protein).append("–≥\n");
        text.append("  ü•§ –û–±—ä—ë–º: ").append(dayPlan.lunch.volume).append("–º–ª\n\n");
        
        // –ü–µ—Ä–µ–∫—É—Å 2
        text.append("ü•§ –ü–ï–†–ï–ö–£–° 2 (").append(dayPlan.snack2.time).append(")\n");
        text.append("‚Ä¢ ").append(dayPlan.snack2.meal).append("\n");
        text.append("  üìä –ë–µ–ª–æ–∫: ").append(dayPlan.snack2.protein).append("–≥\n\n");
        
        // –£–∂–∏–Ω
        text.append("üåô –£–ñ–ò–ù (").append(dayPlan.dinner.time).append(")\n");
        text.append("‚Ä¢ ").append(dayPlan.dinner.meal).append("\n");
        text.append("  üìä –ë–µ–ª–æ–∫: ").append(dayPlan.dinner.protein).append("–≥\n");
        text.append("  ü•§ –û–±—ä—ë–º: ").append(dayPlan.dinner.volume).append("–º–ª\n\n");
        
        // –ò—Ç–æ–≥–∏ –¥–Ω—è
        text.append("üìä –ò–¢–û–ì–û –ó–ê –î–ï–ù–¨:\n");
        text.append("‚Ä¢ –ë–µ–ª–æ–∫: ").append(dayPlan.totalProtein).append("–≥\n");
        text.append("‚Ä¢ –ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: 5\n");
        
        if (userOpt.isPresent() && userOpt.get().getRestrictions() != null) {
            List<String> restrictions = userOpt.get().getRestrictions();
            if (!restrictions.isEmpty()) {
                text.append("\n‚úÖ –£—á—Ç–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n");
                for (String restriction : restrictions) {
                    text.append("‚Ä¢ ").append(getRestrictionDisplayName(restriction)).append("\n");
                }
            }
        }
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text.toString());
        message.setReplyMarkup(createPlanNavigation(dayIndex));
        
        return message;
    }
    
    public SendMessage regenerateDay(Long chatId, int dayIndex) {
        WeeklyPlan plan = userPlans.get(chatId);
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        
        if (plan == null || userOpt.isEmpty()) {
            return generatePlan(chatId);
        }
        
        User user = userOpt.get();
        
        // –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ–Ω—å
        DayPlan newDay = generateDayPlan(user, dayIndex);
        plan.days.set(dayIndex, newDay);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚úÖ –ü–ª–∞–Ω –Ω–∞ " + newDay.dayName + " —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
        return showDayPlan(chatId, dayIndex);
    }
    
    private WeeklyPlan generateWeeklyPlan(User user) {
        WeeklyPlan plan = new WeeklyPlan();
        plan.userId = user.getId();
        plan.generatedAt = LocalDate.now();
        plan.days = new ArrayList<>();
        
        for (int i = 0; i < 7; i++) {
            plan.days.add(generateDayPlan(user, i));
        }
        
        return plan;
    }
    
    private DayPlan generateDayPlan(User user, int dayIndex) {
        String[] dayNames = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"};
        LocalDate date = LocalDate.now().plusDays(dayIndex);
        
        DayPlan day = new DayPlan();
        day.dayName = dayNames[dayIndex % 7] + ", " + date.format(DateTimeFormatter.ofPattern("dd.MM"));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ AI —Å —É—á—ë—Ç–æ–º —Ñ–∞–∑—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        String prompt = buildPlanPrompt(user, dayIndex);
        String aiResponse = aiService.askQuestion(prompt, user);
        
        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã
        String phaseCode = user.getPhase() != null ? user.getPhase().getCode() : null;
        day = parsePlanOrUseTemplate(day, phaseCode, user.getRestrictions(), aiResponse);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–µ–ª–æ–∫
        day.totalProtein = day.breakfast.protein + day.snack1.protein + 
                          day.lunch.protein + day.snack2.protein + day.dinner.protein;
        
        return day;
    }
    
    private String buildPlanPrompt(User user, int dayIndex) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n");
        prompt.append("–§–∞–∑–∞: ").append(user.getPhase() != null ? user.getPhase().getCode() : "unknown").append("\n");
        
        if (user.getRestrictions() != null && !user.getRestrictions().isEmpty()) {
            prompt.append("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ").append(String.join(", ", user.getRestrictions())).append("\n");
        }
        
        prompt.append("–¶–µ–ª—å –ø–æ –±–µ–ª–∫—É: ").append(user.getGoal() != null ? user.getGoal() : "60-80–≥ –≤ –¥–µ–Ω—å").append("\n");
        prompt.append("–§–æ—Ä–º–∞—Ç: 5 –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –ø–µ—Ä–µ–∫—É—Å, –æ–±–µ–¥, –ø–µ—Ä–µ–∫—É—Å, —É–∂–∏–Ω)\n");
        prompt.append("–£–∫–∞–∂–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞: –±–ª—é–¥–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞, –æ–±—ä—ë–º –ø–æ—Ä—Ü–∏–∏\n");
        
        return prompt.toString();
    }
    
    private DayPlan parsePlanOrUseTemplate(DayPlan day, String phase, List<String> restrictions, String aiResponse) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ —Ñ–∞–∑–∞–º
        
        boolean lactoseFree = restrictions != null && restrictions.contains("lactose_free");
        boolean vegetarian = restrictions != null && restrictions.contains("vegetarian");
        
        switch (phase) {
            case "liquid":
                day.breakfast = new Meal("–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "09:00", 20, 150);
                day.snack1 = new Meal("–ë—É–ª—å–æ–Ω –∫—É—Ä–∏–Ω—ã–π", "11:00", 5, 150);
                day.lunch = new Meal("–ö—Ä–µ–º-—Å—É–ø –∏–∑ —Ç—ã–∫–≤—ã", "13:00", 10, 200);
                day.snack2 = new Meal("–ô–æ–≥—É—Ä—Ç –ø–∏—Ç—å–µ–≤–æ–π " + (lactoseFree ? "–±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–π" : ""), "16:00", 8, 150);
                day.dinner = new Meal("–°–º—É–∑–∏ —Å –ø—Ä–æ—Ç–µ–∏–Ω–æ–º", "19:00", 15, 200);
                break;
                
            case "pureed":
                day.breakfast = new Meal("–¢–≤–æ—Ä–æ–∂–Ω–æ–µ –ø—é—Ä–µ " + (lactoseFree ? "–±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–æ–µ" : ""), "09:00", 18, 120);
                day.snack1 = new Meal("–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –ø—É–¥–∏–Ω–≥", "11:00", 12, 100);
                day.lunch = new Meal(vegetarian ? "–ü—é—Ä–µ –∏–∑ —á–µ—á–µ–≤–∏—Ü—ã" : "–ü—é—Ä–µ –∏–∑ –∫—É—Ä–∏—Ü—ã —Å –æ–≤–æ—â–∞–º–∏", "13:00", 20, 150);
                day.snack2 = new Meal("–Ø–±–ª–æ—á–Ω–æ–µ –ø—é—Ä–µ —Å –ø—Ä–æ—Ç–µ–∏–Ω–æ–º", "16:00", 8, 120);
                day.dinner = new Meal(vegetarian ? "–¢–æ—Ñ—É-–ø—é—Ä–µ" : "–†—ã–±–Ω–æ–µ –ø—é—Ä–µ —Å –±—Ä–æ–∫–∫–æ–ª–∏", "19:00", 18, 150);
                break;
                
            case "soft":
                day.breakfast = new Meal("–Ø–∏—á–Ω–∏—Ü–∞-–±–æ–ª—Ç—É–Ω—å—è", "09:00", 14, 120);
                day.snack1 = new Meal("–ú—è–≥–∫–∏–π —Å—ã—Ä " + (lactoseFree ? "–±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–π" : ""), "11:00", 10, 50);
                day.lunch = new Meal(vegetarian ? "–¢—É—à—ë–Ω–∞—è —Ñ–∞—Å–æ–ª—å" : "–¢–µ—Ñ—Ç–µ–ª–∏ –≤ —Å–æ—É—Å–µ", "13:00", 22, 180);
                day.snack2 = new Meal("–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç", "16:00", 12, 120);
                day.dinner = new Meal(vegetarian ? "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏" : "–ó–∞–ø–µ—á—ë–Ω–Ω–∞—è —Ä—ã–±–∞", "19:00", 20, 150);
                break;
                
            case "regular":
            default:
                day.breakfast = new Meal("–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –ø—Ä–æ—Ç–µ–∏–Ω–æ–º", "09:00", 15, 200);
                day.snack1 = new Meal("–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –±–∞—Ç–æ–Ω—á–∏–∫", "11:00", 12, 0);
                day.lunch = new Meal(vegetarian ? "–°–∞–ª–∞—Ç —Å –∫–∏–Ω–æ–∞" : "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –æ–≤–æ—â–∞–º–∏", "13:00", 25, 250);
                day.snack2 = new Meal("–û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã", "16:00", 8, 0);
                day.dinner = new Meal(vegetarian ? "–ü–∞—Å—Ç–∞ —Å —Ç–æ—Ñ—É" : "–°—Ç–µ–π–∫ –∏–∑ –ª–æ—Å–æ—Å—è —Å —Ä–∏—Å–æ–º", "19:00", 22, 250);
                break;
        }
        
        return day;
    }
    
    private InlineKeyboardMarkup createPlanNavigation(int currentDay) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
        List<InlineKeyboardButton> navigation = new ArrayList<>();
        
        if (currentDay > 0) {
            InlineKeyboardButton prevBtn = new InlineKeyboardButton();
            prevBtn.setText("‚óÄÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å");
            prevBtn.setCallbackData("PLAN:DAY:" + (currentDay - 1));
            navigation.add(prevBtn);
        }
        
        InlineKeyboardButton currentBtn = new InlineKeyboardButton();
        currentBtn.setText("–î–µ–Ω—å " + (currentDay + 1) + "/7");
        currentBtn.setCallbackData("PLAN:CURRENT");
        navigation.add(currentBtn);
        
        if (currentDay < 6) {
            InlineKeyboardButton nextBtn = new InlineKeyboardButton();
            nextBtn.setText("–°–ª–µ–¥. –¥–µ–Ω—å ‚ñ∂Ô∏è");
            nextBtn.setCallbackData("PLAN:DAY:" + (currentDay + 1));
            navigation.add(nextBtn);
        }
        
        keyboard.add(navigation);
        
        // –î–µ–π—Å—Ç–≤–∏—è
        InlineKeyboardButton regenerateBtn = new InlineKeyboardButton();
        regenerateBtn.setText("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å");
        regenerateBtn.setCallbackData("PLAN:REGENERATE:" + currentDay);
        keyboard.add(Arrays.asList(regenerateBtn));
        
        InlineKeyboardButton weekBtn = new InlineKeyboardButton();
        weekBtn.setText("üìÖ –í—Å—è –Ω–µ–¥–µ–ª—è");
        weekBtn.setCallbackData("PLAN:WEEK");
        keyboard.add(Arrays.asList(weekBtn));
        
        InlineKeyboardButton productsBtn = new InlineKeyboardButton();
        productsBtn.setText("üõí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã");
        productsBtn.setCallbackData("CATALOG:FILTERED");
        keyboard.add(Arrays.asList(productsBtn));
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        return markup;
    }
    
    public SendMessage showWeekPlan(Long chatId) {
        WeeklyPlan plan = userPlans.get(chatId);
        
        if (plan == null) {
            return generatePlan(chatId);
        }
        
        StringBuilder text = new StringBuilder();
        text.append("üìÖ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ\n");
        text.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");
        
        for (int i = 0; i < plan.days.size(); i++) {
            DayPlan day = plan.days.get(i);
            text.append(day.dayName).append(":\n");
            text.append("‚Ä¢ –ë–µ–ª–æ–∫: ").append(day.totalProtein).append("–≥\n");
            text.append("‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞: ")
                .append(day.breakfast.meal.split(" ")[0]).append(", ")
                .append(day.lunch.meal.split(" ")[0]).append(", ")
                .append(day.dinner.meal.split(" ")[0]).append("\n\n");
        }
        
        text.append("üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞");
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text.toString());
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for (int i = 0; i < 7; i++) {
            InlineKeyboardButton dayBtn = new InlineKeyboardButton();
            dayBtn.setText((i + 1) + ". " + plan.days.get(i).dayName.split(",")[0]);
            dayBtn.setCallbackData("PLAN:DAY:" + i);
            keyboard.add(Arrays.asList(dayBtn));
        }
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    private SendMessage createErrorMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚ùå " + text);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    private String getRestrictionDisplayName(String restriction) {
        switch (restriction) {
            case "lactose_free": return "–ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã";
            case "gluten_free": return "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞";
            case "vegetarian": return "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ";
            case "vegan": return "–í–µ–≥–∞–Ω—Å—Ç–≤–æ";
            case "halal": return "–•–∞–ª—è–ª—å";
            case "kosher": return "–ö–æ—à–µ—Ä";
            default: return restriction;
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    private static class WeeklyPlan {
        Long userId;
        LocalDate generatedAt;
        List<DayPlan> days;
    }
    
    private static class DayPlan {
        String dayName;
        Meal breakfast;
        Meal snack1;
        Meal lunch;
        Meal snack2;
        Meal dinner;
        int totalProtein;
    }
    
    private static class Meal {
        String meal;
        String time;
        int protein;
        int volume;
        
        Meal(String meal, String time, int protein, int volume) {
            this.meal = meal;
            this.time = time;
            this.protein = protein;
            this.volume = volume;
        }
    }
}
