package com.baria.bot.handler;

import com.baria.bot.model.RedFlag;
import com.baria.bot.model.Reminder;
import com.baria.bot.model.SymptomLog;
import com.baria.bot.model.User;
import com.baria.bot.repository.RedFlagRepository;
import com.baria.bot.repository.SymptomLogRepository;
import com.baria.bot.repository.UserRepository;
import com.baria.bot.service.AiService;
import com.baria.bot.service.RedFlagService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDateTime;
import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class SymptomsHandler {
    
    private final RedFlagService redFlagService;
    private final RedFlagRepository redFlagRepository;
    private final SymptomLogRepository symptomLogRepository;
    private final UserRepository userRepository;
    private final AiService aiService;
    private final com.baria.bot.service.ReminderService reminderService;
    
    // –ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–∂–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
    private final Map<Long, TriageSession> triageSessions = new HashMap<>();
    
    public SendMessage handleSymptomCheck(Long chatId, String symptom) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é —Ç—Ä–∏–∞–∂–∞
        TriageSession session = new TriageSession();
        session.symptom = symptom;
        session.currentStep = 0;
        triageSessions.put(chatId, session);
        
        return sendRedFlagQuestion(chatId, session, 0);
    }
    
    public SendMessage handleRedFlagAnswer(Long chatId, boolean answer) {
        TriageSession session = triageSessions.get(chatId);
        if (session == null) {
            return createMainMenuMessage(chatId, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
        }
        
        if (answer) {
            // Red flag –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
            triageSessions.remove(chatId);
            return createUrgentCareMessage(chatId, session.symptom);
        }
        
        session.currentStep++;
        
        List<RedFlag> redFlags = redFlagRepository.findByIsActiveTrue();
        if (session.currentStep < redFlags.size()) {
            return sendRedFlagQuestion(chatId, session, session.currentStep);
        } else {
            // –í—Å–µ red flags –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            triageSessions.remove(chatId);
            return handleNonUrgentSymptom(chatId, session.symptom);
        }
    }
    
    private SendMessage sendRedFlagQuestion(Long chatId, TriageSession session, int questionIndex) {
        List<RedFlag> redFlags = redFlagRepository.findByIsActiveTrue();
        
        if (questionIndex >= redFlags.size()) {
            return handleNonUrgentSymptom(chatId, session.symptom);
        }
        
        RedFlag redFlag = redFlags.get(questionIndex);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚ö†Ô∏è –í–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:\n\n" + redFlag.getQuestion());
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        InlineKeyboardButton yesBtn = new InlineKeyboardButton();
        yesBtn.setText("‚úÖ –î–∞");
        yesBtn.setCallbackData("SYMPTOM:REDFLAG:YES");
        
        InlineKeyboardButton noBtn = new InlineKeyboardButton();
        noBtn.setText("‚ùå –ù–µ—Ç");
        noBtn.setCallbackData("SYMPTOM:REDFLAG:NO");
        
        keyboard.add(Arrays.asList(yesBtn, noBtn));
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    private SendMessage createUrgentCareMessage(Long chatId, String symptom) {
        // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–º–ø—Ç–æ–º
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        if (userOpt.isPresent()) {
            SymptomLog log = new SymptomLog();
            log.setUser(userOpt.get());
            log.setSymptom(symptom);
            log.setStartedAt(LocalDateTime.now());
            log.setStatus("urgent");
            log.setNotes("Red flag detected - advised urgent care");
            symptomLogRepository.save(log);
        }
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(
            "üö® –¢–†–ï–ë–£–ï–¢–°–Ø –°–†–û–ß–ù–ê–Ø –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –ü–û–ú–û–©–¨\n\n" +
            "–í–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä—å—ë–∑–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n" +
            "‚ùó –Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã, –Ω–æ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n" +
            "1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é\n" +
            "2. –í—ã–∑–≤–∞—Ç—å —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 103 –∏–ª–∏ 112\n" +
            "3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à—É—é –±–æ–ª—å–Ω–∏—Ü—É\n\n" +
            "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—Ä–∞—á—É!"
        );
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        InlineKeyboardButton emergencyBtn = new InlineKeyboardButton();
        emergencyBtn.setText("üìû –í—ã–∑–≤–∞—Ç—å 103");
        emergencyBtn.setUrl("tel:103");
        keyboard.add(Arrays.asList(emergencyBtn));
        
        InlineKeyboardButton hospitalsBtn = new InlineKeyboardButton();
        hospitalsBtn.setText("üìç –ë–ª–∏–∂–∞–π—à–∏–µ –∫–ª–∏–Ω–∏–∫–∏");
        hospitalsBtn.setUrl("https://maps.google.com/maps/search/–±–æ–ª—å–Ω–∏—Ü–∞+—Ä—è–¥–æ–º");
        keyboard.add(Arrays.asList(hospitalsBtn));
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    private SendMessage handleNonUrgentSymptom(Long chatId, String symptom) {
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–º–ø—Ç–æ–º
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            SymptomLog log = new SymptomLog();
            log.setUser(user);
            log.setSymptom(symptom);
            log.setStartedAt(LocalDateTime.now());
            log.setStatus("active");
            log.setNotes("Non-urgent symptom");
            symptomLogRepository.save(log);
            
            // –ü–æ–ª—É—á–∞–µ–º –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RAG
            String phase = user.getPhase() != null ? user.getPhase().getCode() : "unknown";
            String aiResponse = aiService.askQuestion(
                "–ü–∞—Ü–∏–µ–Ω—Ç –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ñ–∞–∑–∞ " + phase + 
                ", –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞: " + symptom + 
                ". –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ–ø–æ–º–æ—â–∏ –ë–ï–ó –ª–µ–∫–∞—Ä—Å—Ç–≤.",
                user
            );
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(
                "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–º–ø—Ç–æ–º—É: " + symptom + "\n\n" +
                aiResponse + "\n\n" +
                "‚ö†Ô∏è –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞, –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.\n" +
                "–ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.\n\n" +
                "–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤."
            );
            
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            
            InlineKeyboardButton monitorBtn = new InlineKeyboardButton();
            monitorBtn.setText("üîî –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 48—á");
            monitorBtn.setCallbackData("SYMPTOM:MONITOR:" + log.getId());
            keyboard.add(Arrays.asList(monitorBtn));
            
            InlineKeyboardButton memoBtn = new InlineKeyboardButton();
            memoBtn.setText("üìù –ü–∞–º—è—Ç–∫–∞ –¥–ª—è –≤—Ä–∞—á–∞");
            memoBtn.setCallbackData("SYMPTOM:MEMO");
            keyboard.add(Arrays.asList(memoBtn));
            
            InlineKeyboardButton backBtn = new InlineKeyboardButton();
            backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
            backBtn.setCallbackData("MAIN_MENU");
            keyboard.add(Arrays.asList(backBtn));
            
            markup.setKeyboard(keyboard);
            message.setReplyMarkup(markup);
            
            return message;
        } else {
            return createMainMenuMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.");
        }
    }
    
    public SendMessage handleSymptomMonitoring(Long chatId, Long symptomLogId) {
        Optional<SymptomLog> logOpt = symptomLogRepository.findById(symptomLogId);
        
        if (logOpt.isEmpty()) {
            return createMainMenuMessage(chatId, "–ó–∞–ø–∏—Å—å –æ —Å–∏–º–ø—Ç–æ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }
        
        SymptomLog log = logOpt.get();
        log.setNotes(log.getNotes() + "; Monitoring enabled for 48h");
        symptomLogRepository.save(log);

        reminderService.createReminder(Reminder.builder()
                .user(log.getUser())
                .type(Reminder.ReminderType.SYMPTOM_WATCH)
                .rrule("FREQ=HOURLY;INTERVAL=12;COUNT=4")
                .localTime("00:00")
                .meta(java.util.Map.of("symptom", log.getSymptom()))
                .build());
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(
            "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–º–ø—Ç–æ–º–∞ –≤–∫–ª—é—á—ë–Ω!\n\n" +
            "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 48 —á–∞—Å–æ–≤.\n\n" +
            "–ï—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º —É—Å–∏–ª–∏—Ç—Å—è –∏–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É."
        );
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    public SendMessage generateSymptomMemo(Long chatId) {
        Optional<User> userOpt = userRepository.findByTgId(chatId);
        
        StringBuilder memo = new StringBuilder();
        memo.append("üìù –ü–ê–ú–Ø–¢–ö–ê –î–õ–Ø –í–ò–ó–ò–¢–ê –ö –í–†–ê–ß–£\n");
        memo.append("================================\n\n");
        
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            memo.append("–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ").append(user.getSurgeryDate()).append("\n");
            memo.append("–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: ").append(getPhaseDisplayName(user.getPhase().getCode())).append("\n");
            memo.append("–†–æ—Å—Ç: ").append(user.getHeightCm()).append(" —Å–º\n");
            memo.append("–í–µ—Å: ").append(user.getWeightKg()).append(" –∫–≥\n\n");
            
            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º—ã
            List<SymptomLog> recentSymptoms = symptomLogRepository.findByUserAndStatusOrderByStartedAtDesc(
                user, "active"
            );
            
            if (!recentSymptoms.isEmpty()) {
                memo.append("–ü–û–°–õ–ï–î–ù–ò–ï –°–ò–ú–ü–¢–û–ú–´:\n");
                for (SymptomLog symptom : recentSymptoms) {
                    memo.append("‚Ä¢ ").append(symptom.getSymptom())
                        .append(" (–Ω–∞—á–∞–ª–æ: ").append(symptom.getStartedAt()).append(")\n");
                }
            }
        }
        
        memo.append("\n–í–û–ü–†–û–°–´ –ö –í–†–ê–ß–£:\n");
        memo.append("‚Ä¢ _____________________\n");
        memo.append("‚Ä¢ _____________________\n");
        memo.append("‚Ä¢ _____________________\n");
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(memo.toString());
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    private SendMessage createMainMenuMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        InlineKeyboardButton backBtn = new InlineKeyboardButton();
        backBtn.setText("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        backBtn.setCallbackData("MAIN_MENU");
        keyboard.add(Arrays.asList(backBtn));
        
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);
        
        return message;
    }
    
    private String getPhaseDisplayName(String phase) {
        if (phase == null) return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
        switch (phase) {
            case "liquid": return "–ñ–∏–¥–∫–∞—è";
            case "pureed": return "–ü—é—Ä–µ";
            case "soft": return "–ú—è–≥–∫–∞—è";
            case "regular": return "–û–±—ã—á–Ω–∞—è";
            default: return phase;
        }
    }
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç—Ä–∏–∞–∂–∞
    private static class TriageSession {
        String symptom;
        int currentStep;
        List<Boolean> answers = new ArrayList<>();
    }
}
