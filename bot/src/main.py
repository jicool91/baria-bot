import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from .settings import settings
from .keyboards import main_patient_kb
import httpx

logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è AI-–æ—Ç–≤–µ—Ç–æ–≤
awaiting_ai_users = set()

async def cmd_start(message: Message):
    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
        reply_markup=main_patient_kb
    )

async def handle_patient_menu(message: Message):
    text = message.text
    if text == "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò":
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –Ø —Å–≤–µ—Ä—é—Å—å —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ –∏ –æ—Ç–≤–µ—á—É.")
        awaiting_ai_users.add(message.from_user.id)
    elif text == "üìù –ñ—É—Ä–Ω–∞–ª":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –≤–µ—Å(–∫–≥);–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ(1-5);—Å–∏–º–ø—Ç–æ–º—ã\n–ü—Ä–∏–º–µ—Ä: 85.2;4;—Ç–æ—à–Ω–æ—Ç–∞ –Ω–µ—Ç")
    else:
        await message.answer(f"–§—É–Ω–∫—Ü–∏—è '{text}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")

async def handle_ai_question(message: Message):
    if message.from_user.id in awaiting_ai_users:
        try:
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(settings.RAG_URL, json={
                    "user_id": message.from_user.id,
                    "question": message.text
                })

            if response.status_code == 200:
                data = response.json()
                answer = data.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                sources = data.get("sources", [])

                final_answer = answer
                if sources:
                    final_answer += f"\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)}"

                await message.answer(final_answer)
            else:
                await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.")

        except Exception as e:
            logging.error(f"RAG error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        awaiting_ai_users.discard(message.from_user.id)
    else:
        await message.answer(f"–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

async def main():
    bot = Bot(settings.BOT_TOKEN)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(handle_patient_menu, F.text.in_({
        "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", "üíä –í–∏—Ç–∞–º–∏–Ω—ã", "üö∞ –í–æ–¥–∞", "üìù –ñ—É—Ä–Ω–∞–ª", "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò", "ü©∫ –°–≤—è–∑—å —Å –≤—Ä–∞—á–æ–º"
    }))
    dp.message.register(handle_ai_question, F.text)

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())