import asyncio
import logging
from datetime import datetime
import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from .settings import settings
from .keyboards import main_patient_kb
from .states import RegStates, JournalStates, AskAIStates
from .red_flags import RedFlagDetector
from . import db
import httpx

logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
pool = None

async def on_startup():
    global pool
    pool = await db.get_pool()
    logging.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    global pool
    if pool:
        await pool.close()
    logging.info("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await db.upsert_user(
        pool,
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )

    if user['role'] == 'doctor':
        await message.answer("üë®‚Äç‚öïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ–∫—Ç–æ—Ä! –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Ä–∞—á–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    if user['onboarding_completed']:
        await message.answer(
            "üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
            reply_markup=main_patient_kb
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. "
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å.\n\n"
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ü–æ–ª–Ω–æ–µ –∏–º—è)"
        )
        await state.set_state(RegStates.waiting_full_name)

async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    await db.update_user_onboarding(pool, message.from_user.id, full_name=message.text)

    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!\n\n"
        "–ö–æ–≥–¥–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è?\n"
        "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.06.2024)"
    )
    await state.set_state(RegStates.waiting_surgery_date)

async def process_surgery_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
        await db.update_user_onboarding(pool, message.from_user.id, surgery_date=date_obj)

        await message.answer(
            "‚úÖ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–≥–æ –≤—Ä–∞—á–∞ (–ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—à–µ–≥–æ —Ö–∏—Ä—É—Ä–≥–∞):"
        )
        await state.set_state(RegStates.waiting_doctor_code)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.06.2024"
        )

async def process_doctor_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –≤—Ä–∞—á–∞"""
    code = message.text.upper().strip()
    doctor = await db.verify_doctor_code(pool, code)

    if doctor:
        await db.update_user_onboarding(pool, message.from_user.id, doctor_code=code)
        await message.answer(
            f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞—à –≤—Ä–∞—á: {doctor['doctor_name']}\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å.\n"
            "–§–æ—Ä–º–∞—Ç: —Ä–æ—Å—Ç,–≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 170,85.5)"
        )
        await state.set_state(RegStates.waiting_height_weight)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤—Ä–∞—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —É —Å–≤–æ–µ–≥–æ —Ö–∏—Ä—É—Ä–≥–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑:"
        )

async def process_height_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞ –∏ –≤–µ—Å–∞"""
    try:
        parts = message.text.replace(' ', '').split(',')
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        height = int(parts[0])
        weight = float(parts[1])

        if height < 100 or height > 250:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç")
        if weight < 30 or weight > 300:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å")

        await db.update_user_onboarding(
            pool,
            message.from_user.id,
            height_cm=height,
            weight_kg=weight
        )

        await message.answer(
            f"‚úÖ –†–æ—Å—Ç: {height} —Å–º, –í–µ—Å: {weight} –∫–≥\n\n"
            "–ù–∞ –∫–∞–∫–æ–π —Ñ–∞–∑–µ –ø–∏—Ç–∞–Ω–∏—è –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?\n\n"
            "1Ô∏è‚É£ –ñ–∏–¥–∫–∞—è (–ø–µ—Ä–≤—ã–µ 1-2 –Ω–µ–¥–µ–ª–∏)\n"
            "2Ô∏è‚É£ –ü—é—Ä–µ (2-4 –Ω–µ–¥–µ–ª–∏)\n"
            "3Ô∏è‚É£ –ú—è–≥–∫–∞—è (4-8 –Ω–µ–¥–µ–ª—å)\n"
            "4Ô∏è‚É£ –û–±—ã—á–Ω–∞—è (–ø–æ—Å–ª–µ 8 –Ω–µ–¥–µ–ª—å)\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∑—ã (1-4):"
        )
        await state.set_state(RegStates.waiting_phase)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–æ—Å—Ç,–≤–µ—Å\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 170,85.5"
        )

async def process_phase(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è"""
    phases = {
        "1": "–∂–∏–¥–∫–∞—è",
        "2": "–ø—é—Ä–µ",
        "3": "–º—è–≥–∫–∞—è",
        "4": "–æ–±—ã—á–Ω–∞—è"
    }

    phase_num = message.text.strip()
    if phase_num in phases:
        phase = phases[phase_num]
        await db.update_user_onboarding(pool, message.from_user.id, current_phase=phase)

        await message.answer(
            f"‚úÖ –§–∞–∑–∞ –ø–∏—Ç–∞–Ω–∏—è: {phase}\n\n"
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏?\n"
            "(–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç')"
        )
        await state.set_state(RegStates.waiting_restrictions)
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4")

async def process_restrictions(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    restrictions = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    await db.update_user_onboarding(pool, message.from_user.id, dietary_restrictions=restrictions)

    await message.answer(
        "üìã –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ü–µ–ª—è—Ö "
        "–∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ:\n"
        "‚Ä¢ –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "‚Ä¢ –ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É\n"
        "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç—Ä–µ–±—É—é—Ç –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –ø–æ–º–æ—â–∏\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '—Å–æ–≥–ª–∞—Å–µ–Ω' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
    )
    await state.set_state(RegStates.waiting_consent)

async def process_consent(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è"""
    if message.text.lower() in ['—Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–≥–ª–∞—Å–Ω–∞', '–¥–∞']:
        await db.update_user_onboarding(pool, message.from_user.id, consent_given=True)
        await db.complete_onboarding(pool, message.from_user.id)

        await message.answer(
            "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "ü§ñ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n"
            "üìù –í–µ—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª –≤–µ—Å–∞ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n"
            "üìÖ –ü–æ–ª—É—á–∞—Ç—å –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n"
            "üë§ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "üö® –ü–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=main_patient_kb
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ '—Å–æ–≥–ª–∞—Å–µ–Ω' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        )

async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user_profile(pool, message.from_user.id)

    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    surgery_date = user.get('surgery_date')
    surgery_str = surgery_date.strftime('%d.%m.%Y') if surgery_date else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞'

    # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
    completed_fields = 0
    total_fields = 6

    fields_status = {
        'full_name': user.get('full_name'),
        'surgery_date': user.get('surgery_date'),
        'height_cm': user.get('height_cm'),
        'weight_kg': user.get('weight_kg'),
        'current_phase': user.get('current_phase'),
        'doctor_code': user.get('doctor_code')
    }

    for field, value in fields_status.items():
        if value:
            completed_fields += 1

    completeness = int((completed_fields / total_fields) * 100)

    profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å** ({completeness}% –∑–∞–ø–æ–ª–Ω–µ–Ω)

üìù **–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ò–º—è: {user.get('full_name', '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {surgery_str}
‚Ä¢ –ö–æ–¥ –≤—Ä–∞—á–∞: {user.get('doctor_code', '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω')}

üìè **–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ –†–æ—Å—Ç: {user.get('height_cm', '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω')} {'—Å–º' if user.get('height_cm') else ''}
‚Ä¢ –í–µ—Å: {user.get('weight_kg', '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω')} {'–∫–≥' if user.get('weight_kg') else ''}

üçΩÔ∏è **–ü–∏—Ç–∞–Ω–∏–µ:**
‚Ä¢ –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {user.get('current_phase', '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞')}
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {user.get('dietary_restrictions', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('created_at').strftime('%d.%m.%Y')}
‚Ä¢ –û–Ω–±–æ—Ä–¥–∏–Ω–≥: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' if user.get('onboarding_completed') else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}

üí° **–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ:** —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
"""

    await message.answer(profile_text)

async def handle_profile_edit(message: Message):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
    await message.answer(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
        "üìÖ `–¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: –î–î.–ú–ú.–ì–ì–ì–ì`\n"
        "–ü—Ä–∏–º–µ—Ä: –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: 15.06.2024\n\n"
        "üìè `—Ä–æ—Å—Ç –≤–µ—Å: —Ä–æ—Å—Ç,–≤–µ—Å`\n"
        "–ü—Ä–∏–º–µ—Ä: —Ä–æ—Å—Ç –≤–µ—Å: 170,75.5\n\n"
        "üçΩÔ∏è `—Ñ–∞–∑–∞: –Ω–æ–º–µ—Ä`\n"
        "–ü—Ä–∏–º–µ—Ä: —Ñ–∞–∑–∞: 3\n"
        "(1-–∂–∏–¥–∫–∞—è, 2-–ø—é—Ä–µ, 3-–º—è–≥–∫–∞—è, 4-–æ–±—ã—á–Ω–∞—è)\n\n"
        "üö´ `–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç`\n"
        "–ü—Ä–∏–º–µ—Ä: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ª–∞–∫—Ç–æ–∑—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç!"
    )

async def handle_simple_profile_updates(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    text = message.text.lower().strip()

    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        if text.startswith('–¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:'):
            date_str = text.split(':', 1)[1].strip()
            surgery_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            await db.update_user_onboarding(pool, message.from_user.id, surgery_date=surgery_date)
            await message.answer(f"‚úÖ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {surgery_date.strftime('%d.%m.%Y')}")
            return True

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –∏ –≤–µ—Å–∞
        elif text.startswith('—Ä–æ—Å—Ç –≤–µ—Å:'):
            values = text.split(':', 1)[1].strip()
            parts = values.replace(' ', '').split(',')
            if len(parts) == 2:
                height = int(parts[0])
                weight = float(parts[1])
                if 100 <= height <= 250 and 30 <= weight <= 300:
                    await db.update_user_onboarding(
                        pool, message.from_user.id,
                        height_cm=height, weight_kg=weight
                    )
                    await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ä–æ—Å—Ç {height} —Å–º, –≤–µ—Å {weight} –∫–≥")
                    return True
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã
        elif text.startswith('—Ñ–∞–∑–∞:'):
            phase_num = text.split(':', 1)[1].strip()
            phases = {"1": "–∂–∏–¥–∫–∞—è", "2": "–ø—é—Ä–µ", "3": "–º—è–≥–∫–∞—è", "4": "–æ–±—ã—á–Ω–∞—è"}
            if phase_num in phases:
                phase = phases[phase_num]
                await db.update_user_onboarding(pool, message.from_user.id, current_phase=phase)
                await message.answer(f"‚úÖ –§–∞–∑–∞ –ø–∏—Ç–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {phase}")
                return True
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∞–∑–∞")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        elif text.startswith('–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:'):
            restrictions = text.split(':', 1)[1].strip()
            restrictions = restrictions if restrictions.lower() != '–Ω–µ—Ç' else None
            await db.update_user_onboarding(pool, message.from_user.id, dietary_restrictions=restrictions)
            restrictions_text = restrictions if restrictions else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            await message.answer(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {restrictions_text}")
            return True

        return False

    except (ValueError, IndexError) as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ `–¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: –î–î.–ú–ú.–ì–ì–ì–ì`\n"
            "‚Ä¢ `—Ä–æ—Å—Ç –≤–µ—Å: 170,75.5`\n"
            "‚Ä¢ `—Ñ–∞–∑–∞: 1-4`\n"
            "‚Ä¢ `–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–µ—Ç`"
        )
        return True

async def handle_patient_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    text = message.text

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await show_profile(message)

    elif text == "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò":
        await message.answer(
            "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏.\n"
            "–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.\n\n"
            "‚ö†Ô∏è –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!"
        )
        await state.set_state(AskAIStates.waiting_question)

    elif text == "üìù –ñ—É—Ä–Ω–∞–ª":
        await message.answer(
            "üìù –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–≤–µ—Å,–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ,—Å–∏–º–ø—Ç–æ–º—ã\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 78.5,4,—Ç–æ—à–Ω–æ—Ç–∞ –ª–µ–≥–∫–∞—è\n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 (–ø–ª–æ—Ö–æ) –¥–æ 5 (–æ—Ç–ª–∏—á–Ω–æ)"
        )
        await state.set_state(JournalStates.waiting_journal_data)

    else:
        await message.answer(f"–§—É–Ω–∫—Ü–∏—è '{text}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")

async def handle_ai_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ red-flags
    is_critical, detected_flags, severity = RedFlagDetector.check_symptoms(message.text)

    if is_critical:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–º–ø—Ç–æ–º
        user = await db.get_user_profile(pool, message.from_user.id)
        if user:
            await db.save_red_flag(pool, user['id'], message.text, severity)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning = RedFlagDetector.format_warning(detected_flags)
        await message.answer(warning)
        await state.clear()
        return

    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ RAG
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(settings.RAG_URL, json={
                "user_id": message.from_user.id,
                "question": message.text
            })

        if response.status_code == 200:
            data = response.json()
            answer = data.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            sources = data.get("sources", [])

            final_answer = answer
            if sources:
                final_answer += f"\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)}"

            await message.answer(final_answer)
        else:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.")

    except Exception as e:
        logging.error(f"RAG error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

async def handle_journal_entry(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ"""
    try:
        parts = message.text.split(',')
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

        weight = float(parts[0].strip())
        mood = int(parts[1].strip())
        symptoms = parts[2].strip()

        if not (1 <= mood <= 5):
            raise ValueError("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–ø—Ç–æ–º—ã –Ω–∞ red-flags
        is_critical, detected_flags, severity = RedFlagDetector.check_symptoms(symptoms)

        if is_critical:
            user = await db.get_user_profile(pool, message.from_user.id)
            if user:
                await db.save_red_flag(pool, user['id'], symptoms, severity)

            warning = RedFlagDetector.format_warning(detected_flags)
            await message.answer(warning)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        entry = await db.save_journal_entry(pool, message.from_user.id, weight, mood, symptoms)

        if entry:
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"üìÖ –î–∞—Ç–∞: {entry['entry_date']}\n"
                f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
                f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}/5\n"
                f"ü©∫ –°–∏–º–ø—Ç–æ–º—ã: {symptoms}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")

    except ValueError as e:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–µ—Å,–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ,—Å–∏–º–ø—Ç–æ–º—ã\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 78.5,4,—Ç–æ—à–Ω–æ—Ç–∞ –ª–µ–≥–∫–∞—è"
        )
    except Exception as e:
        logging.error(f"Journal entry error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()

async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text.lower().strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await handle_profile_edit(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if await handle_simple_profile_updates(message):
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=main_patient_kb
    )

async def main():
    bot = Bot(settings.BOT_TOKEN)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup/shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, CommandStart())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_full_name, RegStates.waiting_full_name)
    dp.message.register(process_surgery_date, RegStates.waiting_surgery_date)
    dp.message.register(process_doctor_code, RegStates.waiting_doctor_code)
    dp.message.register(process_height_weight, RegStates.waiting_height_weight)
    dp.message.register(process_phase, RegStates.waiting_phase)
    dp.message.register(process_restrictions, RegStates.waiting_restrictions)
    dp.message.register(process_consent, RegStates.waiting_consent)

    dp.message.register(handle_ai_question, AskAIStates.waiting_question)
    dp.message.register(handle_journal_entry, JournalStates.waiting_journal_data)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é (—Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è)
    dp.message.register(handle_patient_menu, F.text.in_({
        "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", "üíä –í–∏—Ç–∞–º–∏–Ω—ã", "üö∞ –í–æ–¥–∞", "üìù –ñ—É—Ä–Ω–∞–ª",
        "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò", "ü©∫ –°–≤—è–∑—å —Å –≤—Ä–∞—á–æ–º", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
    }))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(handle_other_messages, F.text)

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())