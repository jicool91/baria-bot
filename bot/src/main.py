import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from .settings import settings
from .keyboards import main_patient_kb, main_doctor_kb
from .states import RegStates, JournalStates, AskAIStates
from .handlers import onboarding, profile, ai_assistant, journal
from . import db

logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
pool = None

async def on_startup():
    global pool
    pool = await db.get_pool()
    
    # –ü–µ—Ä–µ–¥–∞–µ–º pool –≤ handlers –ü–û–°–õ–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    onboarding.pool = pool
    profile.pool = pool
    ai_assistant.pool = pool
    journal.pool = pool
    
    logging.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    global pool
    if pool:
        await pool.close()
    logging.info("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    
    user = await db.upsert_user(
        pool,
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )

    if user['role'] == 'doctor':
        await message.answer(
            "üë®‚Äç‚öïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ–∫—Ç–æ—Ä! –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Ä–∞—á–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=main_doctor_kb
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    if user['onboarding_completed']:
        await message.answer(
            "üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
            reply_markup=main_patient_kb
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await onboarding.start_quick_onboarding(message, state)

async def handle_patient_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    text = message.text

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await profile.show_profile(message, pool)

    elif text == "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò":
        await ai_assistant.start_ai_session(message, state)

    elif text == "üìù –ñ—É—Ä–Ω–∞–ª":
        await journal.start_journal_entry(message, state)

    elif text == "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è":
        await message.answer("üìÖ –ü–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

    elif text == "üíä –í–∏—Ç–∞–º–∏–Ω—ã":
        await message.answer("üíä –ú–æ–¥—É–ª—å –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

    elif text == "ü©∫ –°–≤—è–∑—å —Å –≤—Ä–∞—á–æ–º":
        await message.answer("ü©∫ –°–≤—è–∑—å —Å –≤—Ä–∞—á–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

    else:
        await message.answer(f"–§—É–Ω–∫—Ü–∏—è '{text}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")

async def handle_profile_commands(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = message.text.lower().strip()

    # –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await profile.handle_profile_edit(message)
        return True

    # –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    return await profile.handle_simple_profile_updates(message, pool)

async def handle_other_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è
    if await handle_profile_commands(message):
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=main_patient_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π pool
async def process_basic_info_wrapper(message: Message, state: FSMContext):
    return await onboarding.process_basic_info(message, state, pool)

async def process_doctor_code_wrapper(message: Message, state: FSMContext):
    return await onboarding.process_doctor_code_quick(message, state, pool)

async def process_consent_wrapper(message: Message, state: FSMContext):
    return await onboarding.process_consent_quick(message, state, pool)

async def process_field_choice_wrapper(message: Message, state: FSMContext):
    return await profile.process_field_choice(message, state, pool)

async def update_height_weight_wrapper(message: Message, state: FSMContext):
    return await profile.update_height_weight(message, state, pool)

async def update_phase_wrapper(message: Message, state: FSMContext):
    return await profile.update_phase(message, state, pool)

async def update_restrictions_wrapper(message: Message, state: FSMContext):
    return await profile.update_restrictions(message, state, pool)

async def handle_ai_question_wrapper(message: Message, state: FSMContext):
    return await ai_assistant.handle_ai_question(message, state, pool)

async def handle_journal_entry_wrapper(message: Message, state: FSMContext):
    return await journal.handle_journal_entry(message, state, pool)

async def main():
    bot = Bot(settings.BOT_TOKEN)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup/shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, CommandStart())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é (–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–ï–†–í–´–ú–ò)
    dp.message.register(handle_patient_menu, F.text.in_({
        "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", "üíä –í–∏—Ç–∞–º–∏–Ω—ã", "üìù –ñ—É—Ä–Ω–∞–ª",
        "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò", "ü©∫ –°–≤—è–∑—å —Å –≤—Ä–∞—á–æ–º", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
    }))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π (–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    # –û–Ω–±–æ—Ä–¥–∏–Ω–≥
    dp.message.register(process_basic_info_wrapper, onboarding.QuickRegStates.waiting_basic_info)
    dp.message.register(process_doctor_code_wrapper, onboarding.QuickRegStates.waiting_doctor_code)
    dp.message.register(process_consent_wrapper, onboarding.QuickRegStates.waiting_consent)

    # –ü—Ä–æ—Ñ–∏–ª—å
    dp.message.register(process_field_choice_wrapper, profile.ProfileStates.choosing_field)
    dp.message.register(update_height_weight_wrapper, profile.ProfileStates.editing_height_weight)
    dp.message.register(update_phase_wrapper, profile.ProfileStates.editing_phase)
    dp.message.register(update_restrictions_wrapper, profile.ProfileStates.editing_restrictions)

    # –ò–ò
    dp.message.register(handle_ai_question_wrapper, AskAIStates.waiting_question)

    # –ñ—É—Ä–Ω–∞–ª
    dp.message.register(handle_journal_entry_wrapper, JournalStates.waiting_journal_data)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –ø–æ—Å–ª–µ–¥–Ω–∏–π)
    dp.message.register(handle_other_messages, F.text)

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
