# bot/src/handlers/ai_assistant.py
import logging
import httpx
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from ..settings import settings
from ..red_flags import RedFlagDetector
from ..db import get_user_profile, save_red_flag

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è pool (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ main.py)
pool = None

async def start_ai_session(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
    await message.answer(
        "ü§ñ **–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç**\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ:\n"
        "‚Ä¢ –ü–∏—Ç–∞–Ω–∏–∏ –ø–æ —Ñ–∞–∑–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ –∏ —Å–∏–º–ø—Ç–æ–º–∞—Ö\n"
        "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –¥–æ–±–∞–≤–∫–∞—Ö\n"
        "‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
    )
    from ..states import AskAIStates
    await state.set_state(AskAIStates.waiting_question)

async def handle_ai_question(message: Message, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
    global pool
    if pool is None:
        pool = db_pool

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ red-flags
    is_critical, detected_flags, severity = RedFlagDetector.check_symptoms(message.text)

    if is_critical:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–º–ø—Ç–æ–º
        user = await get_user_profile(pool, message.from_user.id)
        if user:
            await save_red_flag(pool, user['id'], message.text, severity)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning = RedFlagDetector.format_warning(detected_flags)
        await message.answer(warning)
        await state.clear()
        return

    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ RAG
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(settings.RAG_URL, json={
                "user_id": message.from_user.id,
                "question": message.text
            })

        if response.status_code == 200:
            data = response.json()
            answer = data.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            sources = data.get("sources", [])

            final_answer = answer
            if sources:
                final_answer += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {', '.join(sources)}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å
            final_answer += "\n\nüí¨ –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é."

            await message.answer(final_answer)
        else:
            await message.answer(
                "‚ùå –°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                "üè• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π."
            )

    except Exception as e:
        logging.error(f"RAG error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É."
        )

    await state.clear()
