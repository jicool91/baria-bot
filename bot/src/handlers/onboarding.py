# bot/src/handlers/onboarding.py
from datetime import datetime
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..keyboards import main_patient_kb, quick_onboarding_kb
from ..db import update_user_onboarding, complete_onboarding, verify_doctor_code

class QuickRegStates(StatesGroup):
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ 3 —à–∞–≥–∞
    waiting_basic_info = State()      # –ò–º—è + –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    waiting_doctor_code = State()     # –ö–æ–¥ –≤—Ä–∞—á–∞
    waiting_consent = State()         # –°–æ–≥–ª–∞—Å–∏–µ

async def start_quick_onboarding(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    await message.answer(
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–π –±–æ—Ç!**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n"
        "üöÄ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç** (–∑–∞–π–º–µ—Ç 2 –º–∏–Ω—É—Ç—ã):\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "‚Ä¢ –ö–æ–¥ –≤—Ä–∞—á–∞\n"
        "‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
        "**–®–∞–≥ 1 –∏–∑ 3:** –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "‚Ä¢ –í–∞—à–µ –∏–º—è\n"
        "‚Ä¢ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)\n\n"
        "**–ü—Ä–∏–º–µ—Ä:** –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞, 15.06.2024"
    )
    await state.set_state(QuickRegStates.waiting_basic_info)

async def process_basic_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parts = [part.strip() for part in message.text.split(',')]

        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        full_name = parts[0]
        date_str = parts[1]

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è
        if len(full_name) < 2:
            raise ValueError("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è")

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        surgery_date = datetime.strptime(date_str, "%d.%m.%Y").date()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await update_user_onboarding(
            message.from_user.id,
            full_name=full_name,
            surgery_date=surgery_date
        )

        await message.answer(
            f"‚úÖ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
            f"üë§ –ò–º—è: {full_name}\n"
            f"üìÖ –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {surgery_date.strftime('%d.%m.%Y')}\n\n"
            f"**–®–∞–≥ 2 –∏–∑ 3:** –ö–æ–¥ –≤—Ä–∞—á–∞\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –≤–∞—à —Ö–∏—Ä—É—Ä–≥:"
        )
        await state.set_state(QuickRegStates.waiting_doctor_code)

    except ValueError as e:
        if "time data" in str(e):
            error_msg = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
        else:
            error_msg = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è, –î–î.–ú–ú.–ì–ì–ì–ì"

        await message.answer(
            f"{error_msg}\n\n"
            f"**–ü—Ä–∏–º–µ—Ä:** –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞, 15.06.2024"
        )

async def process_doctor_code_quick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –≤—Ä–∞—á–∞ –≤ –±—ã—Å—Ç—Ä–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ"""
    code = message.text.upper().strip()
    doctor = await verify_doctor_code(code)

    if doctor:
        await update_user_onboarding(message.from_user.id, doctor_code=code)
        await message.answer(
            f"‚úÖ **–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"üë®‚Äç‚öïÔ∏è –í–∞—à –≤—Ä–∞—á: {doctor['doctor_name']}\n\n"
            f"**–®–∞–≥ 3 –∏–∑ 3:** –°–æ–≥–ª–∞—Å–∏–µ\n\n"
            f"üìã **–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö**\n\n"
            f"–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ü–µ–ª—è—Ö "
            f"–∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ:\n"
            f"‚Ä¢ –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            f"‚Ä¢ –ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É\n"
            f"‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç—Ä–µ–±—É—é—Ç –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –ø–æ–º–æ—â–∏\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ **'—Å–æ–≥–ª–∞—Å–µ–Ω'** –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"
        )
        await state.set_state(QuickRegStates.waiting_consent)
    else:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤—Ä–∞—á–∞**\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —É —Å–≤–æ–µ–≥–æ —Ö–∏—Ä—É—Ä–≥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

async def process_consent_quick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –≤ –±—ã—Å—Ç—Ä–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ"""
    if message.text.lower() in ['—Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–≥–ª–∞—Å–Ω–∞', '–¥–∞']:
        await update_user_onboarding(message.from_user.id, consent_given=True)
        await complete_onboarding(message.from_user.id)

        await message.answer(
            "üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!\n\n"
            "üöÄ **–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:**\n"
            "ü§ñ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n"
            "üìù –í–µ—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n"
            "üë§ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:**\n"
            "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Ä–æ—Å—Ç, –≤–µ—Å, —Ñ–∞–∑–∞)\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "‚Ä¢ –ù–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚¨áÔ∏è",
            reply_markup=main_patient_kb
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå **–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ **'—Å–æ–≥–ª–∞—Å–µ–Ω'** –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async def suggest_profile_completion(message: Message):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await message.answer(
        "üí° **–£–ª—É—á—à–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!**\n\n"
        "–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –†–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
        "‚Ä¢ –¢–µ–∫—É—â—É—é —Ñ–∞–∑—É –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–∏—â–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
        "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–∑–∂–µ?",
        reply_markup=quick_onboarding_kb
    )