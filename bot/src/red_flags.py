import re
from typing import Tuple, List, Dict

class RedFlagDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""

    RED_FLAGS = {
        "severe_pain": {
            "keywords": ["–±–æ–ª—å", "–±–æ–ª–∏—Ç", "–±–æ–ª—å–Ω–æ", "–Ω–µ–≤—ã–Ω–æ—Å–∏–º–æ", "–æ—á–µ–Ω—å –±–æ–ª—å–Ω–æ"],
            "patterns": [r"–±–æ–ª—å.*([7-9]|10).*–∏–∑.*10", r"([7-9]|10).*–∏–∑.*10.*–±–æ–ª—å"],
            "severity": 10,
            "message": "üö® –ö–†–ò–¢–ò–ß–ù–û: –°–∏–ª—å–Ω–∞—è –±–æ–ª—å (7+ –∏–∑ 10)"
        },
        "blood_vomit": {
            "keywords": ["—Ä–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é", "–∫—Ä–æ–≤—å –≤ —Ä–≤–æ—Ç–µ", "—Ä–≤–µ—Ç –∫—Ä–æ–≤—å—é", "–∫—Ä–æ–≤–∞–≤–∞—è —Ä–≤–æ—Ç–∞"],
            "patterns": [r"—Ä–≤–æ.*–∫—Ä–æ–≤", r"–∫—Ä–æ–≤.*—Ä–≤–æ"],
            "severity": 10,
            "message": "üö® –ö–†–ò–¢–ò–ß–ù–û: –†–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é"
        },
        "high_fever": {
            "keywords": ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∂–∞—Ä", "–ª–∏—Ö–æ—Ä–∞–¥–∫–∞", "–≥–æ—Ä—è—á–∏–π"],
            "patterns": [r"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.*3[89]", r"3[89].*–≥—Ä–∞–¥—É—Å", r"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.*40"],
            "severity": 9,
            "message": "üö® –ö–†–ò–¢–ò–ß–ù–û: –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (38.5¬∞C+)"
        },
        "black_stool": {
            "keywords": ["—á–µ—Ä–Ω—ã–π —Å—Ç—É–ª", "—Ç–µ–º–Ω—ã–π —Å—Ç—É–ª", "—á–µ—Ä–Ω–∞—è –∫–∞–∫–∞—à–∫–∞", "–º–µ–ª–µ–Ω–∞"],
            "patterns": [r"—á–µ—Ä–Ω.*—Å—Ç—É–ª", r"—Ç–µ–º–Ω.*—Å—Ç—É–ª", r"—Å—Ç—É–ª.*—á–µ—Ä–Ω"],
            "severity": 9,
            "message": "üö® –ö–†–ò–¢–ò–ß–ù–û: –ß–µ—Ä–Ω—ã–π —Å—Ç—É–ª (–≤–æ–∑–º–æ–∂–Ω–æ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ)"
        },
        "chest_pain": {
            "keywords": ["–±–æ–ª—å –≤ –≥—Ä—É–¥–∏", "–≥—Ä—É–¥–Ω–∞—è –±–æ–ª—å", "—Å–µ—Ä–¥—Ü–µ –±–æ–ª–∏—Ç", "–±–æ–ª—å –≤ —Å–µ—Ä–¥—Ü–µ"],
            "patterns": [r"–≥—Ä—É–¥.*–±–æ–ª", r"–±–æ–ª.*–≥—Ä—É–¥", r"—Å–µ—Ä–¥—Ü.*–±–æ–ª"],
            "severity": 9,
            "message": "üö® –ö–†–ò–¢–ò–ß–ù–û: –ë–æ–ª—å –≤ –≥—Ä—É–¥–∏"
        },
        "breathing_problems": {
            "keywords": ["–Ω–µ –º–æ–≥—É –¥—ã—à–∞—Ç—å", "—Ç—Ä—É–¥–Ω–æ –¥—ã—à–∞—Ç—å", "–æ–¥—ã—à–∫–∞", "–∑–∞–¥—ã—Ö–∞—é—Å—å"],
            "patterns": [r"–Ω–µ.*–¥—ã—à", r"—Ç—Ä—É–¥–Ω.*–¥—ã—à", r"–∑–∞–¥—ã—Ö"],
            "severity": 9,
            "message": "üö® –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º"
        },
        "constant_vomiting": {
            "keywords": ["–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–≤–æ—Ç–∞", "–≤—Å–µ –≤—Ä–µ–º—è —Ä–≤–µ—Ç", "–Ω–µ –º–æ–≥—É –µ—Å—Ç—å", "–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ—Ä–∂–∏—Ç—Å—è"],
            "patterns": [r"–ø–æ—Å—Ç–æ—è–Ω.*—Ä–≤–æ", r"–≤—Å–µ.*–≤—Ä–µ–º.*—Ä–≤–æ", r"–Ω–∏—á–µ–≥–æ.*–Ω–µ.*–¥–µ—Ä–∂"],
            "severity": 8,
            "message": "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–≤–æ—Ç–∞"
        },
        "dehydration": {
            "keywords": ["–æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ", "—Å—É—Ö–æ—Å—Ç—å –≤–æ —Ä—Ç—É", "–Ω–µ –ø—å—é", "–≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ"],
            "patterns": [r"—Å—É—Ö.*—Ä–æ—Ç", r"–Ω–µ.*–ø.*–≤–æ–¥", r"–≥–æ–ª–æ–≤–æ–∫—Ä—É–∂"],
            "severity": 7,
            "message": "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–∑–Ω–∞–∫–∏ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è"
        }
    }

    @classmethod
    def check_symptoms(cls, text: str) -> Tuple[bool, List[Dict], int]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ red-flags

        Returns:
            (is_critical, detected_flags, max_severity)
        """
        text_lower = text.lower()
        detected_flags = []
        max_severity = 0

        for flag_type, flag_data in cls.RED_FLAGS.items():
            flag_detected = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in flag_data["keywords"]:
                if keyword.lower() in text_lower:
                    flag_detected = True
                    break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if not flag_detected:
                for pattern in flag_data["patterns"]:
                    if re.search(pattern, text_lower):
                        flag_detected = True
                        break

            if flag_detected:
                detected_flags.append({
                    "type": flag_type,
                    "severity": flag_data["severity"],
                    "message": flag_data["message"]
                })
                max_severity = max(max_severity, flag_data["severity"])

        is_critical = max_severity >= 8
        return is_critical, detected_flags, max_severity

    @classmethod
    def format_warning(cls, detected_flags: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö"""
        if not detected_flags:
            return ""

        warning = "üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ò–ú–ü–¢–û–ú–´:\n\n"
        for flag in detected_flags:
            warning += f"‚Ä¢ {flag['message']}\n"

        warning += "\nüè• –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–†–ê–¢–ò–¢–ï–°–¨ –ö –í–†–ê–ß–£ –ò–õ–ò –í–´–ó–û–í–ò–¢–ï –°–ö–û–†–£–Æ –ü–û–ú–û–©–¨!\n"
        warning += "üìû –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103 –∏–ª–∏ 112"

        return warning

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    test_cases = [
        "–£ –º–µ–Ω—è –±–æ–ª—å 8 –∏–∑ 10, –æ—á–µ–Ω—å –±–æ–ª—å–Ω–æ",
        "–†–≤–æ—Ç–∞ —Å –∫—Ä–æ–≤—å—é —É–∂–µ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å",
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 39 –≥—Ä–∞–¥—É—Å–æ–≤",
        "–ß–µ—Ä–Ω—ã–π —Å—Ç—É–ª —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º",
        "–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ö–æ—Ä–æ—à–æ"
    ]

    for case in test_cases:
        is_critical, flags, severity = RedFlagDetector.check_symptoms(case)
        print(f"–¢–µ–∫—Å—Ç: {case}")
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–æ: {is_critical}, –¢—è–∂–µ—Å—Ç—å: {severity}")
        if flags:
            print(RedFlagDetector.format_warning(flags))
        print("-" * 50)